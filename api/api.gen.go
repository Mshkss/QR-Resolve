// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// ApiEntry defines model for ApiEntry.
type ApiEntry struct {
	Mac         string `json:"mac"`
	RedirectUrl string `json:"redirect_url"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error *string `json:"error,omitempty"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	// Token JWT-токен
	Token *string `json:"token,omitempty"`
}

// Pong defines model for Pong.
type Pong struct {
	Ping string `json:"ping"`
}

// ResolvedLink defines model for ResolvedLink.
type ResolvedLink struct {
	Url *string `json:"url,omitempty"`
}

// AddApiEntryJSONRequestBody defines body for AddApiEntry for application/json ContentType.
type AddApiEntryJSONRequestBody = ApiEntry

// UpdateApiEntryJSONRequestBody defines body for UpdateApiEntry for application/json ContentType.
type UpdateApiEntryJSONRequestBody = ApiEntry

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody = LoginRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Добавить новую пару MAC + redirect_url
	// (POST /api/new)
	AddApiEntry(ctx echo.Context) error
	// Удалить запись по MAC
	// (DELETE /api/{mac})
	DeleteApiEntry(ctx echo.Context, mac string) error
	// Изменить ссылку по MAC
	// (PUT /api/{mac})
	UpdateApiEntry(ctx echo.Context, mac string) error
	// Авторизация пользователя
	// (POST /auth/login)
	LoginUser(ctx echo.Context) error

	// (GET /ping)
	GetPing(ctx echo.Context) error
	// Получить ссылку по типу устройства и MAC-адресу
	// (GET /{category}/{device_id})
	ResolveDevice(ctx echo.Context, category string, deviceId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AddApiEntry converts echo context to params.
func (w *ServerInterfaceWrapper) AddApiEntry(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddApiEntry(ctx)
	return err
}

// DeleteApiEntry converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteApiEntry(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "mac" -------------
	var mac string

	err = runtime.BindStyledParameterWithOptions("simple", "mac", ctx.Param("mac"), &mac, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mac: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteApiEntry(ctx, mac)
	return err
}

// UpdateApiEntry converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateApiEntry(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "mac" -------------
	var mac string

	err = runtime.BindStyledParameterWithOptions("simple", "mac", ctx.Param("mac"), &mac, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mac: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateApiEntry(ctx, mac)
	return err
}

// LoginUser converts echo context to params.
func (w *ServerInterfaceWrapper) LoginUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LoginUser(ctx)
	return err
}

// GetPing converts echo context to params.
func (w *ServerInterfaceWrapper) GetPing(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPing(ctx)
	return err
}

// ResolveDevice converts echo context to params.
func (w *ServerInterfaceWrapper) ResolveDevice(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category" -------------
	var category string

	err = runtime.BindStyledParameterWithOptions("simple", "category", ctx.Param("category"), &category, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category: %s", err))
	}

	// ------------- Path parameter "device_id" -------------
	var deviceId string

	err = runtime.BindStyledParameterWithOptions("simple", "device_id", ctx.Param("device_id"), &deviceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter device_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ResolveDevice(ctx, category, deviceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/api/new", wrapper.AddApiEntry)
	router.DELETE(baseURL+"/api/:mac", wrapper.DeleteApiEntry)
	router.PUT(baseURL+"/api/:mac", wrapper.UpdateApiEntry)
	router.POST(baseURL+"/auth/login", wrapper.LoginUser)
	router.GET(baseURL+"/ping", wrapper.GetPing)
	router.GET(baseURL+"/:category/:device_id", wrapper.ResolveDevice)

}
