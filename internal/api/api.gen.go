// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error *string `json:"error,omitempty"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	// Token JWT-токен
	Token *string `json:"token,omitempty"`
}

// ResolvedLink defines model for ResolvedLink.
type ResolvedLink struct {
	Url *string `json:"url,omitempty"`
}

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody = LoginRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Авторизация пользователя
	// (POST /auth/login)
	LoginUser(ctx echo.Context) error
	// Получить ссылку по типу устройства и MAC-адресу
	// (GET /{category}/{device_id})
	ResolveDevice(ctx echo.Context, category string, deviceId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// LoginUser converts echo context to params.
func (w *ServerInterfaceWrapper) LoginUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LoginUser(ctx)
	return err
}

// ResolveDevice converts echo context to params.
func (w *ServerInterfaceWrapper) ResolveDevice(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category" -------------
	var category string

	err = runtime.BindStyledParameterWithLocation("simple", false, "category", runtime.ParamLocationPath, ctx.Param("category"), &category)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category: %s", err))
	}

	// ------------- Path parameter "device_id" -------------
	var deviceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "device_id", runtime.ParamLocationPath, ctx.Param("device_id"), &deviceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter device_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ResolveDevice(ctx, category, deviceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/login", wrapper.LoginUser)
	router.GET(baseURL+"/:category/:device_id", wrapper.ResolveDevice)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RW3W7cRBR+ldHAHY69m6QF9oqQVshRW+hCKRJEleOdZN3sepyZcWCJVsruVgXUiPAC",
	"qKp4AbOKFedv8wpn3gidsZNddx2Ui0LvxvN3vjnn+77jPerzbsRDFipJG3tU+m3W9czwvhBcNJmMeCgZ",
	"TkSCR0yogJllhstm8JPXjTqMNqgb7nqdoEV8wVosVIHXkdSiqhfholQiCLdov389wzeeM1/RvkUf8K0g",
	"bLKdmEk1HynypPyRi1Y5mGS+YKq+uEQtuslF11O0Md06F9aisWQi9LqsfA3OflZ82j7vVgIWbCcOBGvR",
	"xvfTa6xptPWb33RT+hTfZiEOWkz6IohUwEPaoGtPv1nQQ5jAKaRwQa0ZpKy31t74wg++DNbcJz+79UeB",
	"K92wecdfde+629F3366ufWrb9u0y3mSSd3ZZ60EQbs+Di0WnnKW2UpFsOE6PxyreMIlybhkLp4Jwk8+/",
	"Fd5AqvdhDJkeELjU+5DBBWRwDgmkeohTIz3UBwSX/9YjOIUxZgUu9Cs4J3ABEzjHK/LDE8jgGMYwgSPI",
	"9BBSONOHBDICGRzhOT2ETL+ADE4hwRybM+dEj/RAD83HCY5gDIlFisvOIMXtOZ4jSIroKYFLmJCHK6sm",
	"AAY9hrHeh0T/VuzWAxjrQzguzoz070QP9EC/gjM41SOEnxDEj3Ah0YNpMuwfQsxsoEzuHzdJUS2y8pVL",
	"LbrLhMwzWLNrdh3LySMWelFAG3TJrts1w03VNrV0vFi1nQ6y0RSa5xLDcntYCLdFGzlZn0gmaE52JtXn",
	"vNXDjT4PFQvNGS+KOoFvTjnPJQ+nhoGjDwXbpA36gTN1FKewE6ck8H5ZUkrEzEzkUjGgF2u1dx27EKIJ",
	"/hYP/9IDuIRU/4o1Qc4kMC4IgixI9EvI9CHmeblWf2e4yv5ahetPSJHxer/gnB7pX5BbVxSc4aNRnoy7",
	"XU/08OgfVS8wpIUzfQDHMEGaX6kE2eZtSbS3lVi16Tre5uz5nmJbXPT6zl6L7QY+exa0+visLVbBoYKk",
	"98xOw0DhdZliAu+d0/7rGxR7QPTLXOS5UG3ikQXytXvPIhtkgTx0H91/iuokemjDEToQ8trQnVo093d6",
	"BZy+zTNrpjZTd6s0/UrEae4fekA+QvEvQAJHZnpQaSPV6K5zeUt43rP64tLynbsff1KBc/0/VE6pSVQR",
	"9M2Vn6GVXUACJ7nTQpKLpfbexHJC9AtD/3Nk+b+1gALq8v8ItZQ27COmSxRqxp6kRxV0yntGOpfosvBf",
	"G4WjUWRF75ztORgMc4CttZKxqKwysfVoxh0eN9EbMCITu1fKNn8L178IOyJSNpMdaYuY9tf7/wQAAP//",
	"5pqvaGIKAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
